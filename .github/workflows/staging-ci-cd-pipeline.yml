name: staging CI/CD pipeline

on:
  push:
    branches: [ main, feature/* , hotfix/*, release/* ]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
#  deploy_and_build:
##    needs: run_tests
#    name: Build and deploy
#    runs-on: ubuntu-latest
#    environment: staging
#
#    steps:
#    - name: Extract branch name
#      shell: bash
#      run: echo "branch=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}" >> $GITHUB_OUTPUT
#      id: extract_branch
#    - name: Install ssh keys
#      run: |
#        install -m 600 -D /dev/null ~/.ssh/id_rsa
#        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
#        ssh-keyscan -H ${{ secrets.SSH_HOST }} > ~/.ssh/known_hosts
#
#    - name: connect, pull and build
#      run: |
#        ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "cd ${{ secrets.STAGING_WORK_DIR }} && git checkout ${{ steps.extract_branch.outputs.branch }} && git pull && make build-frontend && make build-backend && exit"

#    - name: cleanup
#      run: rm -rf ~/.ssh

  run_tests:
    name: Running tests
    #needs: deploy_and_build
    runs-on: ubuntu-latest
    environment: staging

    steps:
      - name: Install ssh keys
        run: |
          install -m 600 -D /dev/null ~/.ssh/id_rsa
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.SSH_HOST }} > ~/.ssh/known_hosts

      - name: Run e2e tests
        run: |
          ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "cd ${{ secrets.STAGING_WORK_DIR }} && python3 -m venv venv && source venv/bin/activate && cp .env mapping_workbench/frontend/.env && npm install cypress && make test-e2e && exit"

      - name: cleanup
        run: rm -rf ~/.ssh

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: coverage.xml
          env_vars: OS,PYTHON
          name: codecov-umbrella
          fail_ci_if_error: true